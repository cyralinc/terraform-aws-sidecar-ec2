# for the moment, acknowledge early
# aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id $INSTANCE_ID --lifecycle-hook-name ${name_prefix}-InitLifeCycleHook --auto-scaling-group-name $ASG_NAME --region ${aws_region}

function retry() {
  RETRIES=15
  while [ $RETRIES -gt 0 ]; do
    set +e
    $@
    RESULT=$?
    set -e
    if [ $RESULT -eq 0 ]; then
      echo "Success"
      return 0
    fi
    echo "Failed"
    sleep 5
    let RETRIES-=1
  done
  echo "Retries exceeded"
  exit 3
}
# General package install
yum update -y
yum install -y aws-cfn-bootstrap wget ec2-instance-connect docker jq

## Docker Setup
sudo service docker start
sudo usermod -a -G docker ec2-user
# Compose Setup
sudo mkdir -p /usr/local/lib/docker/cli-plugins/
sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
# Configure fd limit for ec2 instance and containers
sudo bash -c 'cat > /etc/security/limits.d/fdlimit.conf' << EOF
*       soft  nofile  65535
*       hard  nofile  65535
EOF
sudo bash -c 'cat > /etc/sysconfig/docker' << EOF
DAEMON_MAXFILES=65535
OPTIONS="--default-ulimit nofile=65535:65535"
DAEMON_PIDFILE_TIMEOUT=10
EOF
sudo systemctl restart docker

echo "Fetching public hostname..."
INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $( \
    curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" \
    )" http://169.254.169.254/latest/meta-data/instance-id || echo "$HOSTNAME")
echo "Setting INSTANCE_ID to '$INSTANCE_ID'"

export NGINX_RESOLVER=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}')
echo "Setting NGINX_RESOLVER to '$NGINX_RESOLVER'"

echo "Fetching secrets..."
SIDECAR_IDP_PUBLIC_CERT="$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .sidecarPublicIdpCertificate)"
SIDECAR_IDP_PRIVATE_KEY="$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .sidecarPrivateIdpKey)"
mkdir -p /home/ec2-user/cyral/

function extract_key_from_json_input() {
  # Both key and tls.key are valid JSON keys for private keys.
  # Values can be PEM strings or base64-encoded PEM strings.
  jq -r '
    (if has("key") then .key else ."tls.key" end) as $key |
    if ($key | startswith("-----BEGIN")) then $key else ($key | @base64d) end
  '
}

function extract_cert_from_json_input() {
  # Both cert and tls.crt are valid JSON keys for certificates.
  # Values can be PEM strings or base64-encoded PEM strings.
  jq -r '
    (if has("cert") then .cert else ."tls.crt" end) as $cert |
    if ($cert | startswith("-----BEGIN")) then $cert else ($cert | @base64d) end
  '
}

function get_secret_value() {
  secret_arn="$1"
  role_arn="$2"
  [ -z "$secret_arn" ] && return
  (
    if [ -n "$role_arn" ]; then
      assume_role_result="$(aws sts assume-role --role-arn $role_arn --role-session-name cyral-sidecar)"
      export AWS_ACCESS_KEY_ID=$(echo "$assume_role_result" | jq -r .Credentials.AccessKeyId)
      export AWS_SECRET_ACCESS_KEY=$(echo "$assume_role_result" | jq -r .Credentials.SecretAccessKey)
      export AWS_SESSION_TOKEN=$(echo "$assume_role_result" | jq -r .Credentials.SessionToken)
    fi
    aws --region ${aws_region} secretsmanager get-secret-value --secret-id $secret_arn --query SecretString --output text
  )
}

SIDECAR_TLS_CERT_SECRET_VALUE=$(
  get_secret_value "${sidecar_tls_certificate_secret_arn}" "${sidecar_tls_certificate_role_arn}"
)
SIDECAR_CA_CERT_SECRET_VALUE=$(
  get_secret_value "${sidecar_ca_certificate_secret_arn}" "${sidecar_ca_certificate_role_arn}"
)
SIDECAR_TLS_KEY=$(echo "$SIDECAR_TLS_CERT_SECRET_VALUE" | extract_key_from_json_input | base64 -w 0)
SIDECAR_TLS_CERT=$(echo "$SIDECAR_TLS_CERT_SECRET_VALUE" | extract_cert_from_json_input | base64 -w 0)
SIDECAR_CA_KEY=$(echo "$SIDECAR_CA_CERT_SECRET_VALUE" | extract_key_from_json_input | base64 -w 0)
SIDECAR_CA_CERT=$(echo "$SIDECAR_CA_CERT_SECRET_VALUE" | extract_cert_from_json_input | base64 -w 0)

echo "Initializing environment variables..."
cat > /home/ec2-user/.env << EOF
SIDECAR_ID=${sidecar_id}
CONTROLPLANE_HOST=${controlplane_host}
CONTAINER_REGISTRY=${container_registry}
SECRETS_LOCATION=${secrets_location}
SIDECAR_ENDPOINT=${sidecar_endpoint}
AWS_REGION=${aws_region}
INSTANCE_ID=$INSTANCE_ID
DD_API_KEY=${dd_api_key}
LOG_GROUP_NAME=${log_group_name}

LOG_INTEGRATION=${log_integration}
METRICS_INTEGRATION=${metrics_integration}

NGINX_RESOLVER=$NGINX_RESOLVER
SSO_LOGIN_URL=${idp_sso_login_url}
IDP_CERTIFICATE=${replace(idp_certificate, "\n", "\\n")}

SIDECAR_IDP_PUBLIC_CERT=$SIDECAR_IDP_PUBLIC_CERT
SIDECAR_IDP_PRIVATE_KEY=$SIDECAR_IDP_PRIVATE_KEY

HCVAULT_INTEGRATION_ID=${hc_vault_integration_id}

LOAD_BALANCER_TLS_PORTS=${load_balancer_tls_ports}

CYRAL_CERTIFICATE_MANAGER_TLS_KEY=$${SIDECAR_TLS_KEY}
CYRAL_CERTIFICATE_MANAGER_TLS_CERT=$${SIDECAR_TLS_CERT}
CYRAL_CERTIFICATE_MANAGER_CA_KEY=$${SIDECAR_CA_KEY}
CYRAL_CERTIFICATE_MANAGER_CA_CERT=$${SIDECAR_CA_CERT}
EOF
