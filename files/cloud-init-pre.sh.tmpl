mkdir -p /home/ec2-user/cyral/

package_install
get_secret

# Get the latest sidecar version from the Control Plane if necessary.
IS_DYNAMIC_VERSION="false"
SIDECAR_VERSION=${sidecar_version}
if [ -z $SIDECAR_VERSION ]; then
  echo "Sidecar version is unset - version will be dynamically managed."
  IS_DYNAMIC_VERSION="true"
  get_sidecar_version
  if [ $? -ne 0 ]; then
    echo "Error getting sidecar version from Control Plane. Dynamic version support is only enabled for Control Planes >= v4.10"
    exit 1
  fi
  if [ -z $SIDECAR_VERSION ]; then
    echo "Sidecar version is undefined."
    exit 1
  fi

  # Create custom health check scripts
  cat << EOF > /home/ec2-user/cyral/healthcheck.sh
#!/usr/bin/env bash
token=\$(${curl} -sf -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
instance_id=\$(${curl} -sf -H "X-aws-ec2-metadata-token: \$token" http://169.254.169.254/latest/meta-data/instance-id || echo "\$HOSTNAME")
health=\$(${curl} -sf -X GET "http://localhost:9000/health")
if [ \$? -ne 0 ]; then
  echo "Error getting sidecar health"
  exit 1
fi
recycle_status=\$(echo \$health | jq -r .components.recycle.status)
if [ \$recycle_status == "degraded" ]; then
  echo "Sidecar instance has been marked for recycling - setting EC2 health to 'Unhealthy'"
  aws autoscaling set-instance-health --region ${aws_region} --instance-id \$instance_id --health-status Unhealthy
fi
EOF

  cat << EOF > /etc/systemd/system/healthcheck.service
[Unit]
Description=Sidecar recycle EC2 health check
[Service]
ExecStart=/home/ec2-user/cyral/healthcheck.sh
EOF

  cat << EOF > /etc/systemd/system/healthcheck.timer
[Unit]
Description=Sidecar recycle EC2 health check every 30 sec
[Timer]
OnBootSec=1min
OnUnitActiveSec=30
AccuracySec=1
[Install]
WantedBy=timers.target
EOF

  # Start health check timer
  chmod +x /home/ec2-user/cyral/healthcheck.sh
  sudo systemctl enable healthcheck.timer
  sudo systemctl daemon-reload
  sudo systemctl start healthcheck.timer
fi

echo "Sidecar version: $SIDECAR_VERSION"

docker_setup
if [[ ${use_single_container} == "true" ]]; then
    echo "Skipping Docker Compose Install, not required for single container"
else
    docker_compose_install
fi
fetch_hostname
update_nginx_resolver
load_certs
load_idp_certs
registry_login
if [[ ${use_single_container} == "true" ]]; then
    echo "Skipping Download Sidecar Compose File, not required for single container"
else
    retry download_sidecar
fi

echo "Initializing environment variables..."
cat > /home/ec2-user/.env << EOF
SIDECAR_VERSION=$SIDECAR_VERSION
IS_DYNAMIC_VERSION=$IS_DYNAMIC_VERSION
IS_RECYCLABLE=true
CONTROLPLANE_HOST=${controlplane_host}
CONTAINER_REGISTRY=${container_registry}
SECRETS_LOCATION=${secrets_location}
SIDECAR_ENDPOINT=${sidecar_endpoint}
AWS_REGION=${aws_region}
INSTANCE_ID=$INSTANCE_ID
DD_API_KEY=${dd_api_key}
LOG_GROUP_NAME=${log_group_name}

LOG_INTEGRATION=${log_integration}
METRICS_INTEGRATION=${metrics_integration}
TLS_SKIP_VERIFY=${tls_skip_verify}

NGINX_RESOLVER=$NGINX_RESOLVER
SSO_LOGIN_URL=${idp_sso_login_url}
IDP_CERTIFICATE=${replace(idp_certificate, "\n", "\\n")}

SIDECAR_IDP_PUBLIC_CERT=$SIDECAR_IDP_PUBLIC_CERT
SIDECAR_IDP_PRIVATE_KEY=$SIDECAR_IDP_PRIVATE_KEY

HCVAULT_INTEGRATION_ID=${hc_vault_integration_id}

LOAD_BALANCER_TLS_PORTS=${load_balancer_tls_ports}

CYRAL_SIDECAR_ID=${sidecar_id}
CYRAL_SIDECAR_CLIENT_ID=$${SIDECAR_CLIENT_ID}
CYRAL_SIDECAR_CLIENT_SECRET=$${SIDECAR_CLIENT_SECRET}
CYRAL_CONTROL_PLANE=${controlplane_host}
CYRAL_SIDECAR_ENDPOINT=${sidecar_endpoint}

CYRAL_CERTIFICATE_MANAGER_TLS_KEY=$${SIDECAR_TLS_KEY}
CYRAL_CERTIFICATE_MANAGER_TLS_CERT=$${SIDECAR_TLS_CERT}
CYRAL_CERTIFICATE_MANAGER_CA_KEY=$${SIDECAR_CA_KEY}
CYRAL_CERTIFICATE_MANAGER_CA_CERT=$${SIDECAR_CA_CERT}

EOF
