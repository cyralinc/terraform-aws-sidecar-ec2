echo "Fetching secret: sidecar client ID and client secret."
SIDECAR_CLIENT_ID=$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .clientId)
SIDECAR_CLIENT_SECRET=$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .clientSecret)

function get_aws_secrets_manager_secret_field() {
  secret_arn="$1"
  secret_field="$2"
  aws --region ${aws_region} secretsmanager get-secret-value --secret-id "$secret_arn" --query SecretString --output text | \
    jq -r ."$secret_field"
}

function get_aws_secrets_manager_secret_field_with_assumed_role() {
  role_to_assume="$1"
  secret_arn="$2"
  secret_field="$3"

  assume_role_result="$(aws sts assume-role --role-arn $role_to_assume --role-session-name cyral-sidecar)"

  AWS_ACCESS_KEY_ID=$(echo "$assume_role_result" | jq -r .Credentials.AccessKeyId) \
  AWS_SECRET_ACCESS_KEY=$(echo "$assume_role_result" | jq -r .Credentials.SecretAccessKey) \
  AWS_SESSION_TOKEN=$(echo "$assume_role_result" | jq -r .Credentials.SessionToken) \
  get_aws_secrets_manager_secret_field "$secret_arn" "$secret_field"
}

ASSUME_ROLE_FOR_TLS_CERTIFICATE=${sidecar_tls_certificate_must_assume_role}
if $ASSUME_ROLE_FOR_TLS_CERTIFICATE; then
  get_aws_secrets_manager_secret_field_with_assumed_role \
  "${sidecar_tls_certificate_role_arn}" \
  "${sidecar_tls_certificate_secret_arn}" \
  "key" > /home/ec2-user/.sidecar-tls-key.pem

  get_aws_secrets_manager_secret_field_with_assumed_role \
  "${sidecar_tls_certificate_role_arn}" \
  "${sidecar_tls_certificate_secret_arn}" \
  "cert" > /home/ec2-user/.sidecar-tls-cert.pem
else
  get_aws_secrets_manager_secret_field \
  "${sidecar_tls_certificate_secret_arn}" \
  "key" > /home/ec2-user/.sidecar-tls-key.pem

  get_aws_secrets_manager_secret_field \
  "${sidecar_tls_certificate_secret_arn}" \
  "cert" > /home/ec2-user/.sidecar-tls-cert.pem
fi

ASSUME_ROLE_FOR_CA_CERTIFICATE=${sidecar_ca_certificate_must_assume_role}
if $ASSUME_ROLE_FOR_CA_CERTIFICATE; then
  get_aws_secrets_manager_secret_field_with_assumed_role \
  "${sidecar_ca_certificate_role_arn}" \
  "${sidecar_ca_certificate_secret_arn}" \
  "key" > /home/ec2-user/.sidecar-ca-key.pem

  get_aws_secrets_manager_secret_field_with_assumed_role \
  "${sidecar_ca_certificate_role_arn}" \
  "${sidecar_ca_certificate_secret_arn}" \
  "cert" > /home/ec2-user/.sidecar-ca-cert.pem
else
  get_aws_secrets_manager_secret_field \
  "${sidecar_ca_certificate_secret_arn}" \
  "key" > /home/ec2-user/.sidecar-ca-key.pem

  get_aws_secrets_manager_secret_field \
  "${sidecar_ca_certificate_secret_arn}" \
  "cert" > /home/ec2-user/.sidecar-ca-cert.pem
fi

echo "Downloading sidecar.compose.yaml..."
function get_token () {
  local url_token="${protocol}://${controlplane_host}:$1/v1/users/oidc/token"
  token=$(${curl} --fail --no-progress-meter --request POST "$url_token" -d grant_type=client_credentials -d client_id="$${SIDECAR_CLIENT_ID}" -d client_secret="$${SIDECAR_CLIENT_SECRET}" 2>&1)
  token_error=$(echo $?)
}

function download_sidecar () {
  # Test default (443) and then 8000
  get_token "443"
  if [[ $token_error -ne 0 ]]; then
    get_token "8000"
    if [[ $token_error -ne 0 ]]; then
      return 1
    fi
  fi
  local access_token=$(echo "$token" | jq -r .access_token)
  local url="${protocol}://${controlplane_host}/deploy/docker-compose?TemplateVersion=${sidecar_version}&TemplateType=terraform&LogIntegration=${log_integration}&MetricsIntegration=${metrics_integration}&HCVaultIntegrationID=${hc_vault_integration_id}&WiresEnabled=${repositories_supported}"
  echo "Trying to download the sidecar template from: $url"
  if [[ $(${curl} -s -o /home/ec2-user/sidecar.compose.yaml -w "%%{http_code}" -L "$url" -H "Authorization: Bearer $access_token") = 200 ]]; then
    return 0
  fi
  return 1
}
retry download_sidecar

unset SIDECAR_CLIENT_ID
unset SIDECAR_CLIENT_SECRET

echo "Fetching secret: container registry key..."
aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r 'select(.containerRegistryKey != null) | .containerRegistryKey' | base64 --decode > /home/ec2-user/cyral/container_registry_key.json
until [ -f /home/ec2-user/cyral/container_registry_key.json ]; do echo "wait"; sleep 1; done

function login () {
  if [[ ${container_registry} == *".amazonaws.com"* ]]; then
    echo "(login): Logging in to AWS ECR..."
    eval $(aws ecr --no-include-email get-login  --region ${aws_region})
  elif [ -s /home/ec2-user/cyral/container_registry_key.json ]; then
    echo "(login): Logging in to GCR..."
    cat /home/ec2-user/cyral/container_registry_key.json | docker login -u ${container_registry_username} --password-stdin https://gcr.io
  else
    echo "(login): Won't log in automatically to any image registry. Image registry set to: ${container_registry}"
  fi
}

function launch () { cd /home/ec2-user && docker-compose -f sidecar.compose.yaml up -d; }
retry login
retry launch
