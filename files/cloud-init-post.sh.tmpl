  echo "Fetching secret: sidecar client ID and client secret."
  SIDECAR_CLIENT_ID=$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .clientId)
  SIDECAR_CLIENT_SECRET=$(aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r .clientSecret)

  echo "Downloading sidecar.compose.yaml..."
  function get_token () {
    local url_token="${local.protocol}://${var.control_plane}:$1/v1/users/oidc/token"
    token=$(${local.curl} --fail --no-progress-meter --request POST "$url_token" -d grant_type=client_credentials -d client_id="${var.client_id}" -d client_secret="${var.client_secret}" 2>&1)
    token_error=$(echo $?)
  }

  function download_sidecar () {
    if [[ -z ${var.control_plane_port} ]]; then
      # No control_plane_port is set, testing default (443) and then 8000
      get_token "443"
      if [[ $token_error -ne 0 ]]; then
        get_token "8000"
        if [[ $token_error -ne 0 ]]; then
          return 1
        fi
      fi
    else
      # Use the control_plane_port defined
      get_token ${var.control_plane_port}
      if [[ $token_error -ne 0 ]]; then
        return 1
      fi
    fi
    local access_token=$(echo "$token" | jq -r .access_token)
    local url="${local.protocol}://${var.control_plane}/deploy/docker-compose?TemplateVersion=${var.sidecar_version}&clientId=${var.client_id}&clientSecret=${var.client_secret}&SidecarId=${var.sidecar_id}&TemplateType=terraform&LogIntegration=${var.log_integration}&MetricsIntegration=${var.metrics_integration}&HCVaultIntegrationID=${var.hc_vault_integration_id}&WiresEnabled=${join(",", var.repositories_supported)}"
    echo "Trying to download the sidecar template from: $url"
    if [[ $(${local.curl} -s -o /home/ec2-user/sidecar.compose.yaml -w "%%{http_code}" -L "$url" -H "authorization: Bearer $access_token") = 200 ]]; then
      return 0
    fi
    return 1
  }
  retry download_sidecar

  unset SIDECAR_CLIENT_ID
  unset SIDECAR_CLIENT_SECRET

  echo "Fetching secret: container registry key..."
  aws secretsmanager get-secret-value --secret-id ${secrets_location} --query SecretString --output text \
    --region ${aws_region} | jq -r 'select(.containerRegistryKey != null) | .containerRegistryKey' | base64 --decode > /home/ec2-user/cyral/container_registry_key.json
  until [ -f /home/ec2-user/cyral/container_registry_key.json ]; do echo "wait"; sleep 1; done
  cat >> /home/ec2-user/.bash_profile << EOF
  if [[ ${container_registry} == *".amazonaws.com"* ]]; then
    echo "Logging in to AWS ECR..."
    eval $(aws ecr --no-include-email get-login  --region ${aws_region})
  elif [ -s /home/ec2-user/cyral/container_registry_key.json ]; then
      echo "Logging in to GCR..."
      cat /home/ec2-user/cyral/container_registry_key.json | docker login -u ${container_registry_username} --password-stdin https://gcr.io
  else
      echo "Won't log in automatically to any image registry. Image registry set to: ${container_registry}"
  fi
  EOF

  function login () {
  if [[ ${container_registry} == *".amazonaws.com"* ]]; then
    echo "(login): Logging in to AWS ECR..."
    eval $(aws ecr --no-include-email get-login  --region ${aws_region})
  elif [ -s /home/ec2-user/cyral/container_registry_key.json ]; then
      echo "(login): Logging in to GCR..."
      cat /home/ec2-user/cyral/container_registry_key.json | docker login -u ${container_registry_username} --password-stdin https://gcr.io
  else
      echo "(login): Won't log in automatically to any image registry. Image registry set to: ${container_registry}"
  fi
}

function launch () { cd /home/ec2-user && docker-compose -f sidecar.compose.yaml up -d; }
retry login
retry launch
